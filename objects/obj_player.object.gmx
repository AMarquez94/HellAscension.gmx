<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize player

grav = 1;
hvel = PLAYER_BASE_SPEED;
jvel = PLAYER_BASE_JUMP_SPEED;
vvel = 0;
maxLifes = PLAYER_BASE_LIFES;
lifes = maxLifes;
invulnerable = false;

//lastJumped = false;

enum orientation {
   left = -1,
   right = 1
}

enum states{
    running,
    jumping,
    collidedWall,
    falling
}

playerOrientation = orientation.right;
playerState = states.running;

//view_yview[0] = clamp(y - view_hview[0]/2,0,view_hview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes player vulnerable again

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics

/* 
TODO:
    -Meter enemigos
    -Meter muerte
    -Parar cámara cuando player muera y quitar que el fuego pare cuando muere
    -Meter menus
    -Caída en picado porque toca el techo y entonces xvel=0
*/

var jkey = keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_left);
var jkey_held = keyboard_check(vk_space) || mouse_check_button(mb_left);



/* Jumps and landings */
if(place_meeting(x, y + 1, obj_solid)){
    vvel = 0;
    if(playerState == states.jumping){
    
        //Landing
        playerState = states.running;
        if(hvel == 0){
        
            //Landing from wall
            playerState = states.falling;
            hvel = PLAYER_BASE_SPEED * image_xscale;
        }
    }
    
    // Jump
    if(jkey) {
        vvel = -jvel;
        playerState = states.jumping;
    }
} else{
    
    // Gravity
    var maxGravityVel = 10;
    var maxGravity = grav;
    
    if(playerState == states.collidedWall){
    
        //Rozamiento pared
        maxGravityVel = 3;
        maxGravity = grav - sign(vvel) * 0.5;
    }
    if(vvel &lt; maxGravityVel){
        vvel += maxGravity;
    } else{
        vvel = maxGravityVel;
    }
    
    if (vvel &lt; 0) &amp;&amp; (!jkey_held) vvel = max(vvel,-jvel/3)
}

/* Horizontal collisions */
if (place_meeting(x+hvel, y, obj_solid)){
    while(!place_meeting(x+sign(hvel), y, obj_solid)){
        x += sign(hvel)
    }
    
    
    //Cambia de dirección
    image_xscale = -image_xscale;
    
    playerOrientation = -playerOrientation;    
    
    //Colision pared
    if(!place_meeting(x, y + 1, obj_solid)){
    
        //Colisiona con pared y se queda quieto
        hvel = 0;
        playerState = states.collidedWall;
    } else{
    
        //Rebota para el otro lado
        hvel = PLAYER_BASE_SPEED * image_xscale;
        playerState = states.running;
    }
}

if(playerState == states.falling &amp;&amp; hvel == 0 &amp;&amp; !place_meeting(x + 1 * playerOrientation, y, obj_solid)){
    playerState = states.collidedWall;
}

if(playerState == states.collidedWall){
    //Esta en una pared
    
    if(place_meeting(x, y + 1, obj_solid)){
    
        //Toca suelo =&gt; tiene que cambiar de direccion
        hvel = PLAYER_BASE_SPEED * image_xscale;
        playerState = states.running;
    } else if(!place_meeting(x - 1, y, obj_solid) &amp;&amp; !place_meeting(x + 1, y, obj_solid)){
        
        //Ya no esta tocando ninguna pared
        playerState = states.falling;
    } else{
    
        //Wall jump
        if(/*!lastJumped &amp;&amp; */jkey){
            hvel = PLAYER_BASE_SPEED * image_xscale;
            vvel = -jvel;
            playerState = states.jumping;
        }
    }
}

/* Colision horizontal con pinchos */
if(place_meeting(x+hvel, y, obj_spikes) &amp;&amp; !invulnerable){
    
    charChangedLife(self, 1, true);
    invulnerable = true;
    alarm[PLAYER_INVULNERABLE_ALARM] = room_speed;
}

// Move horizontally
x += hvel;

/* Vertical collisions */
if (place_meeting(x, y + vvel, obj_solid)){
    while(!place_meeting(x, y + sign(vvel), obj_solid)){
        y = floor(y) + sign(vvel);
    }
    vvel = 0;
}

/* Colision vertical con pinchos */
if(place_meeting(x, y + vvel, obj_spikes) &amp;&amp; !invulnerable){
    
    lifes = max(0, lifes - 1);
    invulnerable = true;
    alarm[PLAYER_INVULNERABLE_ALARM] = room_speed;
}

// Move vertically
y += vvel;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
